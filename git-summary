#!/bin/bash
# Bradford Smith
# git-summary
# 2024-08-05
# Print a summary of git author contributions

# shellcheck disable=2034
# this disables the "appears unused" warning from shellcheck because even though
# this script doesn't use the variables git does
USAGE="[<options>] [<author>]"
SUBDIRECTORY_OK=true

# shellcheck source=/dev/null
# this is added because shellcheck cannot follow the dynamic path to
# git-sh-setup, this is the way git recommends to do it, so I am ok silencing
# the warning here
source "$(git --exec-path)/git-sh-setup"

require_work_tree

# if help is the first option open the manpage
if [ "$1" == "--help" ]; then
    man git-summary
    exit
fi

# parse arguments
# see: https://stackoverflow.com/a/9271406
while [ "$1" != "" ]; do
    case "$1" in
        --after=* | --since=*)
            # shellcheck disable=2001
            begin=$(echo "$1" | sed 's/--\w*=//')
            ;;
        --before=* | --until=*)
            # shellcheck disable=2001
            end=$(echo "$1" | sed 's/--\w*=//')
            ;;
        -w)
            ignorespace=1
            ;;
        --help)
            # if help is given somewhere other than first print usage
            usage
            ;;
        *)
            # anything else is should be an author, break the while so we can
            # parse for authors and print the summary
            break
            ;;
    esac
    # shift to the next parameter
    shift
done

# setup AUTHORS
if [ -n "$1" ]; then
    # author provided
    AUTHORS=$(git log -i -1 --pretty="format:%aN" --author="$1")
    if [ -z "$AUTHORS" ]; then
        die "fatal: ambiguous argument '$1': unknown author."
    fi
else
    # no author provided, run for all of them
    AUTHORS=$(git shortlog -n -s --no-merges | colrm 1 8)
fi

# setup git log options
opts=()
if [ -n "$begin" ]; then
    opts+=("--after=\"$begin\"")
fi
if [ -n "$end" ]; then
    opts+=("--before=\"$end\"")
fi
if [ "$ignorespace" ]; then
    opts+=("-w")
fi

# setup colors
# this uses git itself to tell us whether or not we should print in color, if we
# can it gets the color values from git with default values in case the color
# options are not specified in the user's git config
if git config --get-colorbool color.ui; then
    ADD_COLOR=$(git config --get-color color.diff.new "green")
    SUB_COLOR=$(git config --get-color color.diff.old "red")
    RESET=$(git config --get-color "" "reset")
else
    ADD_COLOR=""
    SUB_COLOR=""
    RESET=""
fi

# print summary for each author
while read -r author; do
    commits=$(git log "${opts[@]}" --no-merges --oneline --use-mailmap --author="$author" | wc -l | tr -d '\n')
    files=$(git log "${opts[@]}" --no-merges --use-mailmap --author="$author" --name-only --pretty=format:"" | sort -u | sed '/^$/d' | wc -l | tr -d '\n')
    adds=$(git log "${opts[@]}" --no-merges --use-mailmap --author="$author" --pretty=tformat: --numstat | awk '{ add+=$1 } END { printf "%s", add }')
    subs=$(git log "${opts[@]}" --no-merges --use-mailmap --author="$author" --pretty=tformat: --numstat | awk '{ subs+=$2 } END { printf "%s", subs }')

    # fix empty adds and subs so numfmt doesn't complain
    if [ -z "$adds" ]; then
        adds="0"
    fi
    if [ -z "$subs" ]; then
        subs="0"
    fi

    printf "%s: %s commits\\n%s files changed, $ADD_COLOR%s insertions(+)$RESET, $SUB_COLOR%s deletions(-)$RESET\\n" \
        "$author" \
        "$(numfmt --grouping "$commits")" \
        "$(numfmt --grouping "$files")" \
        "$(numfmt --grouping "$adds")" \
        "$(numfmt --grouping "$subs")"

done <<< "$AUTHORS"
